# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    tags:
      - v*
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-app:
    name: Build App
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      
    - name: NPM cache
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install JS dependencies
      run: npm install
      working-directory: app
      
    - name: Build App
      run: ./build-app.sh
      working-directory: app
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: ambientHUE-App
        path: app/build
  
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-app
    outputs:
      version: ${{ steps.prepare.outputs.version }}

    steps:
    - uses: actions/checkout@v2

    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: ambientHUE-App
        path: api/build

    - name: Prepare
      id: prepare
      run: |
        DOCKER_IMAGE=lukaspatzke/ambienthue
        DOCKER_PLATFORMS=linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
        VERSION=edge

        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=nightly
        fi

        TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
        fi

        echo ::set-output name=docker_image::${DOCKER_IMAGE}
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
          --build-arg VERSION=${VERSION} \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${GITHUB_SHA::8} \
          ${TAGS} .
  
    - name: Set up Docker Buildx
      uses: crazy-max/ghaction-docker-buildx@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v2
      id: cache
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
            ${{ runner.os }}-buildx-
    
    - name: Docker Buildx (build)
      run: |
        docker buildx build \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,dest=/tmp/.buildx-cache" \
          --output "type=image,push=false" \
          ${{ steps.prepare.outputs.buildx_args }}
    
    - name: Docker Login
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin
    
    - name: Docker Buildx (push)
      if: success() && github.event_name != 'pull_request'
      run: |
        docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
    
    - name: Docker Check Manifest
      if: always() && github.event_name != 'pull_request'
      run: |
        docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
    - name: Clear
      if: always() && github.event_name != 'pull_request'
      run: |
        rm -f ${HOME}/.docker/config.json

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build-docker
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v2

    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: ambientHUE-App
        path: api/build

    - name: Prepare
      run: |
        tar -cvzf ambientHUE.tar.gz api
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./ambientHUE.tar.gz
        asset_name: ambientHUE_${{ needs.build-docker.outputs.version }}.tar.gz
        asset_content_type: application/gzip
    